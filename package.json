{
  "name": "snkmaker",
  "displayName": "Snakemaker",
  "description": "",
  "version": "0.2.4",
  "repository": "https://github.com/molinerisLab/snkmaker",
  "engines": {
    "vscode": "^1.95.0"
  },
  "categories": [
    "Other"
  ],
  "publisher": "SnakemakerUnito",
  "icon": "resources/icon.png",
  "activationEvents": [],
  "main": "./out/extension.js",
  "main_prod": "./dist/extension.js",
  "contributes": {
    "customEditors": [
      {
        "viewType": "NotebookView",
        "displayName": "Export Notebook",
        "selector": [
          {
            "filenamePattern": "*.snkmk"
          }
        ],
        "priority": "default"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "chat-set-notebook-mode",
          "when": "false"
        },
        {
          "command": "process-notebook",
          "when": "false"
        },
        {
          "command": "delete-model",
          "when": "false"
        },
        {
          "command": "add-model",
          "when": "false"
        },
        {
          "command": "print-rule",
          "when": "false"
        },
        {
          "command": "open-loging-details",
          "when": "false"
        },
        {
          "command": "archive-command",
          "when": "false"
        },
        {
          "command": "restore-command",
          "when": "false"
        },
        {
          "command": "delete-command",
          "when": "false"
        },
        {
          "command": "set-command-important",
          "when": "false"
        },
        {
          "command": "set-command-unimportant",
          "when": "false"
        },
        {
          "command": "modify-command-detail",
          "when": "false"
        },
        {
          "command": "use-model",
          "when": "false"
        },
        {
          "command": "history-undo",
          "when": "false"
        },
        {
          "command": "history-redo",
          "when": "false"
        },
        {
          "command": "history-set",
          "when": "false"
        },
        {
          "command": "history-redo-fake",
          "when": "false"
        },
        {
          "command": "history-undo-fake",
          "when": "false"
        },
        {
          "command": "history-redo",
          "when": "false"
        },
        {
          "command": "history-undo",
          "when": "false"
        }
      ],
      "notebook/toolbar": [
        {
          "command": "process-notebook"
        }
      ],
      "view/title": [
        {
          "command": "chat-new-chat",
          "when": "view == snakemaker-chat",
          "group": "navigation@1"
        },
        {
          "command": "open-snakemaker-settings",
          "when": "view == bash-commands"
        },
        {
          "command": "print-all-rules",
          "when": "view == bash-commands",
          "group": "navigation@7"
        },
        {
          "command": "delete-all-commands",
          "when": "view == bash-commands",
          "group": "navigation@6"
        },
        {
          "command": "delete-all-archived-commands",
          "when": "view == bash-commands-archive",
          "group": "navigation"
        },
        {
          "command": "archive-all-commands",
          "when": "view == bash-commands",
          "group": "navigation@5"
        },
        {
          "command": "stop-listening",
          "when": "view == bash-commands && myExtension.isListening==true",
          "group": "navigation@2"
        },
        {
          "command": "start-listening",
          "when": "view == bash-commands && myExtension.isListening==false",
          "group": "navigation@2"
        },
        {
          "command": "history-undo",
          "when": "view == bash-commands && myExtension.canUndo",
          "group": "navigation@3"
        },
        {
          "command": "history-undo-fake",
          "when": "view == bash-commands && !myExtension.canUndo",
          "group": "navigation@2"
        },
        {
          "command": "history-redo",
          "when": "view == bash-commands && myExtension.canRedo",
          "group": "navigation@3"
        },
        {
          "command": "history-redo-fake",
          "when": "view == bash-commands && !myExtension.canRedo",
          "group": "navigation@3"
        },
        {
          "command": "add-model",
          "when": "view == llm-models",
          "group": "navigation@1"
        }
      ],
      "view/item/context": [
        {
          "command": "print-rule",
          "when": "view == bash-commands && (viewItem == ROOT_OBJ_I || viewItem == ROOT_OBJ_NI)",
          "group": "inline@4"
        },
        {
          "command": "archive-command",
          "when": "view == bash-commands && (viewItem == ROOT_OBJ_I || viewItem == ROOT_OBJ_NI)",
          "group": "inline@2"
        },
        {
          "command": "restore-command",
          "when": "view == bash-commands-archive && (viewItem == ROOT_OBJ_I || viewItem == ROOT_OBJ_NI)",
          "group": "inline"
        },
        {
          "command": "delete-command",
          "when": "(view == bash-commands || view == bash-commands-archive) && (viewItem == ROOT_OBJ_I || viewItem == ROOT_OBJ_NI)",
          "group": "inline@3"
        },
        {
          "command": "set-command-important",
          "when": "view == bash-commands && viewItem == ROOT_OBJ_NI",
          "group": "inline@1"
        },
        {
          "command": "set-command-unimportant",
          "when": "view == bash-commands && viewItem == ROOT_OBJ_I",
          "group": "inline@1"
        },
        {
          "command": "modify-command-detail",
          "when": "view == bash-commands && viewItem == CHILD_OBJ_MOD",
          "group": "inline@1"
        },
        {
          "command": "delete-model",
          "when": "view == llm-models && viewItem == USER_MODEL",
          "group": "inline@1"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "snakemake-ai",
          "title": "Snakemaker",
          "icon": "resources/icon.svg"
        }
      ]
    },
    "views": {
      "snakemake-ai": [
        {
          "id": "bash-commands",
          "name": "Bash commands"
        },
        {
          "id": "bash-commands-archive",
          "name": "Archived bash commands"
        },
        {
          "type": "webview",
          "id": "snakemaker-chat",
          "name": "Snakemaker Chat - Bash mode"
        },
        {
          "id": "llm-models",
          "name": "Models",
          "visibility": "collapsed"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "bash-commands",
        "contents": "Listening to command - Your commands will dispay here",
        "when": "myExtension.isListening==true"
      },
      {
        "view": "bash-commands",
        "contents": "Start listening to commands to populate the history",
        "when": "myExtension.isListening==false"
      },
      {
        "view": "bash-commands-archive",
        "contents": "Your archived commands will dispay here"
      }
    ],
    "commands": [
      {
        "command": "chat-set-notebook-mode",
        "title": "Set chat to Notebook mode"
      },
      {
        "command": "chat-new-chat",
        "title": "New chat",
        "icon": "$(terminal-new)"
      },
      {
        "command": "open-loging-details",
        "title": "Snakemaker: Open Logging Feature Details"
      },
      {
        "command": "disable-logs-session",
        "title": "Snakemaker: disable current session logs",
        "enablement": "config.snakemaker.allowLogging"
      },
      {
        "command": "print-rule",
        "title": "Print rule",
        "icon": "$(testing-run-icon)"
      },
      {
        "command": "open-snakemaker-settings",
        "title": "Open settings",
        "icon": "$(settings-view-bar-icon)"
      },
      {
        "command": "print-all-rules",
        "title": "Snakemaker: Print all important rules",
        "icon": "$(testing-run-all-icon)"
      },
      {
        "command": "archive-command",
        "title": "Archive",
        "icon": "$(notebook-move-down)"
      },
      {
        "command": "archive-all-commands",
        "title": "Snakemaker: Archive all commands",
        "icon": "$(notebook-move-down)"
      },
      {
        "command": "restore-command",
        "title": "Restore",
        "icon": "$(notebook-move-up)"
      },
      {
        "command": "delete-command",
        "title": "Delete command",
        "icon": "$(notifications-clear)"
      },
      {
        "command": "delete-all-commands",
        "title": "Snakemaker: Delete all",
        "icon": "$(notifications-clear)"
      },
      {
        "command": "delete-all-archived-commands",
        "title": "Snakemaker: Delete all archived",
        "icon": "$(notifications-clear)"
      },
      {
        "command": "set-command-important",
        "title": "Set important",
        "icon": "$(debug-breakpoint-log-unverified)"
      },
      {
        "command": "set-command-unimportant",
        "title": "Set unimportant",
        "icon": "$(debug-breakpoint-log-disabled)"
      },
      {
        "command": "modify-command-detail",
        "title": "Change",
        "icon": "$(keybindings-edit)"
      },
      {
        "command": "start-listening",
        "title": "Snakemaker: Start listening",
        "icon": "resources/play.svg"
      },
      {
        "command": "stop-listening",
        "title": "Snakemaker: Pause listening",
        "icon": "resources/pause.svg"
      },
      {
        "command": "use-model",
        "title": "Use this model"
      },
      {
        "command": "save-workspace",
        "title": "Snakemaker: Save workspace"
      },
      {
        "command": "load-workspace",
        "title": "Snakemaker: Load workspace"
      },
      {
        "command": "history-undo",
        "title": "Undo",
        "icon": {
          "light": "resources/undo_light_theme.svg",
          "dark": "resources/undo.svg"
        },
        "enablement": "myExtension.canUndo"
      },
      {
        "command": "history-undo-fake",
        "title": "Undo",
        "icon": {
          "light": "resources/undo_disabled_light_theme.svg",
          "dark": "resources/undo_disabled.svg"
        },
        "enablement": "false"
      },
      {
        "command": "history-redo",
        "title": "Redo",
        "icon": {
          "light": "resources/redo_light_theme.svg",
          "dark": "resources/redo.svg"
        },
        "enablement": "myExtension.canRedo"
      },
      {
        "command": "history-redo-fake",
        "title": "Redo",
        "icon": {
          "light": "resources/redo_disabled_light_theme.svg",
          "dark": "resources/redo_disabled.svg"
        },
        "enablement": "false"
      },
      {
        "command": "history-set",
        "title": "Set"
      },
      {
        "command": "delete-model",
        "title": "Delete model",
        "icon": "$(notifications-clear)"
      },
      {
        "command": "add-model",
        "title": "Add model"
      },
      {
        "command": "add-history-manually",
        "title": "Manually add commands to Snakemaker history"
      },
      {
        "command": "process-notebook",
        "title": "Process with Snakemaker"
      },
      {
        "command": "generate-documentation",
        "title": "Auto-generate documentation for current work."
      }
    ],
    "configuration": {
      "title": "Snakemaker",
      "properties": {
        "snakemaker.allowLogging": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Send anonymous logs to our server to improve the extension.  [See details on what is logged](command:open-loging-details)."
        },
        "snakemaker.keepHistoryBetweenSessions": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Maintain the command history between VSCode sessions"
        },
        "snakemaker.snakemakeBestPractices.SetLogFieldInSnakemakeRules": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Each rule has a Log field, as recommended by [Snakemake best practices](https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#log-files)."
        },
        "snakemaker.snakemakeBestPractices.PreferGenericFilenames": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Snakemake rules are generated, when possible, with generic filenames, using wildcards, as recommended by [Snakemake best practices](https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#wildcards)."
        },
        "snakemaker.snakemakeBestPractices.CommentEveryRule": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Every rule is generated with a short description."
        },
        "snakemaker.snakemakeBestPractices.AddCondaDirective": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Track conda environments in the terminal, add a 'conda' directive to rules."
        },
        "snakemaker.snakemakeBestPractices.GenerateConfig": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Move hardcoded values into a configuration. Generate a config.yaml file, or update existing ones. Can slow down rule generation."
        },
        "snakemaker.rulesOutputFormat": {
          "type": "string",
          "enum": [
            "Snakemake",
            "Make"
          ],
          "default": "Snakemake",
          "markdownDescription": "Produce rules in Snakemake or in Make format"
        },
        "snakemaker.snakemakeAbsolutePath": {
          "type": "string",
          "default": "",
          "markdownDescription": "Absolute path to the Snakemake executable. Used to test the generated rules' correctness. If empty, the extension will try to find it in the PATH."
        },
        "snakemaker.ruleGeneration.validateSnakemakeRules": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "When generating Snakemake rules, validate them with the Snakemake executable and try to automatically correct errors."
        },
        "snakemaker.includeCurrentFileIntoPrompt": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "If turned on, the LLM generating the rules has the current Snakefile/Makefile included into its context. This causes the LLM to generate rules that are more context-aware."
        },
        "snakemaker.llm.numberParsingErrorTries": {
          "type": "number",
          "default": 3,
          "markdownDescription": "When an error parsing the LLM's response occurs, the extension will feed the error back to the model and ask for a fix. This value set a limit to the number of tries."
        },
        "snakemaker.llm.parsingErrorActivateStepBackAt": {
          "type": "number",
          "default": 2,
          "markdownDescription": "After a number of failures parsing the LLM's response, the step back strategy asks the LLM itself for a plan to fix the errors, and then fed the plan back to the LLM. This strategy is powerful but more expensive. A value >= numberParsingErrorTries will disable it."
        },
        "snakemaker.ruleGeneration.iterativeValidateAndFix.maxIterations": {
          "type": "number",
          "default": 4,
          "markdownDescription": "When generating Snakemake rules or code, the extension will try to validate the generated code and fix it if needed. This value set a limit to the number of tries."
        },
        "snakemaker.ruleGeneration.iterativeValidateAndFix.activateStepBackAt": {
          "type": "number",
          "default": 3,
          "markdownDescription": "When generating Snakemake rules or code, the extension will try to validate the generated code and fix it if needed; after a certain number of failures, the step back strategy asks the LLM itself for a plan to fix the errors, and then fed the plan back to the LLM. This strategy is powerful but more expensive. A value >= maxIterations will disable it."
        }
      }
    },
    "chatParticipants": [
      {
        "id": "chat-snakemaker-notebook",
        "name": "snakemaker-notebook",
        "fullName": "Snakemaker",
        "description": "Hello I'm Snakemaker and I can assist you converting notebooks into Snakemake pipelines :)",
        "isSticky": true
      },
      {
        "id": "chat-snakemaker",
        "name": "snakemaker",
        "fullName": "Snakemaker",
        "description": "Hello I'm Snakemaker and I can assist you building great pipelines :)",
        "isSticky": true,
        "disambiguation": [
          {
            "category": "Bash command history and Snakemake pipeline building support",
            "description": "The user run bash commands on its terminal for its data analysis purposes and needs help tracking them and automatically turning them into Snakemake rules",
            "examples": [
              "How many commands to I have in history?",
              "Can you write one single snakemake rule with all the commands currently in history?",
              "Can you show me the most important commands in my history?",
              "Can you convert this command into a snakemake rule?",
              "Can you show me the commands that are not important?",
              "Can you convert for me this command in a generic snakemake rule that uses wildcards?"
            ]
          },
          {
            "category": "Support for the usage of the Snakemaker extension",
            "description": "The user installed the Snakemaker extension but don't know how to use it, needs help with the commands and the views",
            "examples": [
              "How does Snakemaker work?",
              "What does Snakemaker do?",
              "How can I archive a command?",
              "How can I restore a command?",
              "Where is my command history?",
              "How can I delete a command?",
              "How can I set a command as important?",
              "How can I set a command as unimportant?",
              "What is an important command?",
              "Why my commands aren't being recorded?",
              "How can I change the details of a command?",
              "How can I use a model?",
              "How can I save my workspace?",
              "How can I load my workspace?",
              "How can I start listening to commands?",
              "How can I stop listening to commands?"
            ]
          }
        ]
      }
    ]
  },
  "scripts_prod": {
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "compile": "npm run check-types && node esbuild.js",
    "check-types": "tsc --noEmit",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "vscode:prepublish": "npm run package",
    "package": "npm run check-types && node esbuild.js --production"
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.9",
    "@types/node": "20.x",
    "@types/vscode": "^1.95.0",
    "@typescript-eslint/eslint-plugin": "^8.10.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "esbuild": ">=0.25.0",
    "eslint": "^9.13.0",
    "typescript": "^5.6.3"
  },
  "dependencies": {
    "diff": "^7.0.0",
    "jsonrepair": "^3.12.0",
    "markdown-it": "^14.1.0",
    "openai": "^4.73.1",
    "tmp": "^0.2.3"
  }
}
